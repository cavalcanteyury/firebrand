version: '3.8'

# CPU MAX: 1.5
# MEM MAX: 350MB
services:
  # Firebrand itself
  api1: &api
    # Instructing docker to build the Ruby image using the Dockerfile in this project
    build: .
    hostname: firebrand1
    environment:
    # Defines environment variable REDIS_URL used in Firebrand
      REDIS_URL: redis://redis:6379/0
      DATABASE_URL: postgres://rinha:rinha2025@postgres:5432/rinha_db
      PRIMARY: "true"
    depends_on:
    # Ensure that listed services starts before Firebrand
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
    # Connects app service to same network as Redis
      - rinha_network
      - payment-processor
    # Resources definition
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "100MB"

  api2:
    <<: *api
    hostname: firebrand2
    environment:
      REDIS_URL: redis://redis:6379/0
      DATABASE_URL: postgres://rinha:rinha2025@postgres:5432/rinha_db
      PRIMARY: "false"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "60MB"

  nginx:
    image: nginx 
    container_name: nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 9999:3000
    networks:
      - rinha_network
    depends_on:
      - redis
      - api1
      - api2
    deploy:
      resources:
        limits:
          cpus: "0.15"
          memory: "20MB"


  # Redis service
  redis:
    image: redis:7-alpine
    ports:
    # Optional: Maps Redis default Port to host. Useful for CLI access
      - "6379:6379"
    networks:
    # Connects app service to same network as Redis
      - rinha_network
    deploy:
      resources:
        limits:
          cpus: "0.15"
          memory: "70MB"

  postgres:
    image: postgres:16-alpine
    environment:
      # Database credentials
      POSTGRES_USER: rinha
      POSTGRES_PASSWORD: rinha2025
      POSTGRES_DB: rinha_db
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - rinha_network
    healthcheck:
      # Command to check service health
      test: ["CMD-SHELL", "pg_isready -U rinha -d rinha_db"]
      # Verification frequency
      interval: 5s
      # Time limit to test command timeout
      timeout: 5s
      # Retry numbers to consider unhealthy
      retries: 5
      # Time in seconds to service start without healthcheck
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "100MB"

# Defining a shared network so the services may communicate with themselves
networks:
  rinha_network:
    driver: bridge
  payment-processor:
    external: true
